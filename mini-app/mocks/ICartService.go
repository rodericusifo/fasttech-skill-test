// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto_service_cart "github.com/rodericusifo/fasttech-skill-test/mini-app/pkg/core/cart/service/dto"
	mock "github.com/stretchr/testify/mock"
)

// ICartService is an autogenerated mock type for the ICartService type
type ICartService struct {
	mock.Mock
}

// AddProductToCart provides a mock function with given fields: payload
func (_m *ICartService) AddProductToCart(payload *dto_service_cart.AddProductToCartDTO) error {
	ret := _m.Called(payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto_service_cart.AddProductToCartDTO) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductFromCart provides a mock function with given fields: payload
func (_m *ICartService) DeleteProductFromCart(payload *dto_service_cart.DeleteProductFromCartDTO) error {
	ret := _m.Called(payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto_service_cart.DeleteProductFromCartDTO) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetListCart provides a mock function with given fields: payload
func (_m *ICartService) GetListCart(payload *dto_service_cart.GetListCartPayloadDTO) ([]*dto_service_cart.GetListCartDTO, error) {
	ret := _m.Called(payload)

	var r0 []*dto_service_cart.GetListCartDTO
	if rf, ok := ret.Get(0).(func(*dto_service_cart.GetListCartPayloadDTO) []*dto_service_cart.GetListCartDTO); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto_service_cart.GetListCartDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto_service_cart.GetListCartPayloadDTO) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewICartService interface {
	mock.TestingT
	Cleanup(func())
}

// NewICartService creates a new instance of ICartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICartService(t mockConstructorTestingTNewICartService) *ICartService {
	mock := &ICartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
